package com.techlabs.config;

import javax.sql.DataSource;

import org.springframework.batch.core.Job;
import org.springframework.batch.core.Step;
import org.springframework.batch.core.job.builder.JobBuilder;
import org.springframework.batch.core.repository.JobRepository;
import org.springframework.batch.core.step.builder.StepBuilder;
import org.springframework.batch.item.database.BeanPropertyItemSqlParameterSourceProvider;
import org.springframework.batch.item.database.JdbcBatchItemWriter;
import org.springframework.batch.item.database.builder.JdbcBatchItemWriterBuilder;
import org.springframework.batch.item.file.FlatFileItemReader;
import org.springframework.batch.item.file.builder.FlatFileItemReaderBuilder;
import org.springframework.batch.item.file.mapping.FieldSetMapper;
import org.springframework.batch.item.file.transform.FieldSet;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.core.io.FileSystemResource;
import org.springframework.jdbc.datasource.DataSourceTransactionManager;
import org.springframework.validation.BindException;

import com.techlabs.entity.Employee;
import com.techlabs.entity.EmployeeTransaction;
import com.techlabs.entity.EmployeeTransaction.TransactionType;


@Configuration
public class BatchTransactionConfiguration {

	@Bean
	public FlatFileItemReader<EmployeeTransaction> transactionReader() {
	    return new FlatFileItemReaderBuilder<EmployeeTransaction>()
	            .name("transactionCsvReader")
	            .resource(new FileSystemResource("C:\\Users\\lawrence.rodriques\\OneDrive - Aurionpro Solutions Limited\\Documents\\Transactions\\employee_transactions.csv"))
	            .delimited()
	            .names(new String[]{"firstname", "lastname", "email", "accountnumber", "salary", "balance"}) // Ensure the names match the CSV headers
	            .fieldSetMapper(new FieldSetMapper<EmployeeTransaction>() {
	                @Override
	                public EmployeeTransaction mapFieldSet(FieldSet fieldSet) throws BindException {
	                    EmployeeTransaction transaction = new EmployeeTransaction();
	                    Employee employee = new Employee();
	                    employee.setFirstname(fieldSet.readString("firstname"));
	                    employee.setLastname(fieldSet.readString("lastname"));
	                    employee.setEmail(fieldSet.readString("email"));
	                    employee.setAccountnumber(fieldSet.readLong("accountnumber")); // Ensure this field is of type Long
	                    transaction.setEmployee(employee);
	                    transaction.setAmount(fieldSet.readDouble("salary")); // Assuming salary is the transaction amount
	                    return transaction;
	                }
	            })
	            .build();
	}



    @Bean
    public JdbcBatchItemWriter<EmployeeTransaction> transactionWriter(DataSource dataSource) {
        return new JdbcBatchItemWriterBuilder<EmployeeTransaction>()
                .itemSqlParameterSourceProvider(new BeanPropertyItemSqlParameterSourceProvider<>())
                .sql("INSERT INTO employee_transactions (employee_id, transaction_amount, transaction_date, transaction_type) " +
                        "VALUES (:employee.employeeId, :amount, :transactionDate, :transactionType)")
                .dataSource(dataSource)
                .build();
    }

    @Bean
    public Step transactionStep(JobRepository jobRepository, DataSourceTransactionManager transactionManager,
                                FlatFileItemReader<EmployeeTransaction> transactionReader,
                                JdbcBatchItemWriter<EmployeeTransaction> transactionWriter) {
        return new StepBuilder("transactionStep", jobRepository)
                .<EmployeeTransaction, EmployeeTransaction>chunk(10, transactionManager)
                .reader(transactionReader)
                .writer(transactionWriter)
                .build();
    }

    @Bean
    @Qualifier("processEmployeeTransactionsJob")
    public Job processEmployeeTransactionsJob(JobRepository jobRepository, Step transactionStep) {
        return new JobBuilder("processEmployeeTransactionsJob", jobRepository)
                .start(transactionStep)
                .build();
    }

    @Bean
    public DataSourceTransactionManager transactionManager(DataSource dataSource) {
        return new DataSourceTransactionManager(dataSource);
    }
}

