package com.techlabs.config;

@Bean
public FlatFileItemReader<EmployeeTransaction> reader() {
    FlatFileItemReader<EmployeeTransaction> reader = new FlatFileItemReader<>();
    reader.setResource(new FileSystemResource("path/to/your/employee_transactions.csv"));
    
    DefaultLineMapper<EmployeeTransaction> lineMapper = new DefaultLineMapper<>();
    
    LineTokenizer lineTokenizer = new DelimitedLineTokenizer();
    lineTokenizer.setNames(new String[]{"firstname", "lastname", "email", "accountnumber", "salary", "balance"});
    
    BeanWrapperFieldSetMapper<EmployeeTransaction> fieldSetMapper = new BeanWrapperFieldSetMapper<>();
    fieldSetMapper.setTargetType(EmployeeTransaction.class);
    
    lineMapper.setLineTokenizer(lineTokenizer);
    lineMapper.setFieldSetMapper(fieldSetMapper);
    
    reader.setLineMapper(lineMapper);
    return reader;
}



    @Bean
    public JdbcBatchItemWriter<EmployeeTransaction> transactionWriter(DataSource dataSource) {
        return new JdbcBatchItemWriterBuilder<EmployeeTransaction>()
                .itemSqlParameterSourceProvider(new BeanPropertyItemSqlParameterSourceProvider<>())
                .sql("INSERT INTO employee_transactions (employee_id, transaction_amount, transaction_date, transaction_type) " +
                        "VALUES (:employee.employeeId, :amount, :transactionDate, :transactionType)")
                .dataSource(dataSource)
                .build();
    }

    @Bean
    public Step transactionStep(JobRepository jobRepository, DataSourceTransactionManager transactionManager,
                                FlatFileItemReader<EmployeeTransaction> transactionReader,
                                JdbcBatchItemWriter<EmployeeTransaction> transactionWriter) {
        return new StepBuilder("transactionStep", jobRepository)
                .<EmployeeTransaction, EmployeeTransaction>chunk(10, transactionManager)
                .reader(transactionReader)
                .writer(transactionWriter)
                .build();
    }

    @Bean
    @Qualifier("processEmployeeTransactionsJob")
    public Job processEmployeeTransactionsJob(JobRepository jobRepository, Step transactionStep) {
        return new JobBuilder("processEmployeeTransactionsJob", jobRepository)
                .start(transactionStep)
                .build();
    }

    @Bean
    public DataSourceTransactionManager transactionManager(DataSource dataSource) {
        return new DataSourceTransactionManager(dataSource);
    }
}

